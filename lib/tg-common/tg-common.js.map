{"version":3,"file":"tg-common.js","sources":["collections/Collections.kt","collections/Maps.kt","kotlin/text/char.kt","text/regex/RegexExtensions.kt","kotlin/math.kt","../../../../../src/jsMain/kotlin/com/github/hovi/kotlintools/dom/Document.kt","generated/_Arrays.kt","kotlin/collections.kt","generated/_Collections.kt","../../commonMain/kotlin/eu/karelhovorka/util/ArrayUtil.kt","kotlin/text/string.kt","../../commonMain/kotlin/eu/karelhovorka/util/IteratorUtil.kt","../../commonMain/kotlin/eu/karelhovorka/util/ListUtil.kt","../../commonMain/kotlin/eu/karelhovorka/util/MapUtil.kt","../../commonMain/kotlin/eu/karelhovorka/util/MathUtil.kt","../../commonMain/kotlin/eu/karelhovorka/util/SmartRandom.kt","../../commonMain/kotlin/eu/karelhovorka/util/StringUtil.kt","text/Strings.kt","../../jsMain/kotlin/eu/karelhovorka/util/RandomUtil.kt","util/Preconditions.kt","../../jsMain/kotlin/eu/karelhovorka/util/audio/AudioPlayer.kt","util/Lazy.kt","util/Standard.kt","../../jsMain/kotlin/eu/karelhovorka/util/audio/AudioTrack.kt","../../jsMain/kotlin/eu/karelhovorka/util/audio/Options.kt","../../jsMain/kotlin/eu/karelhovorka/util/audio/SoundController.kt","../../jsMain/kotlin/eu/karelhovorka/util/audio/SoundOptions.kt","../../jsMain/kotlin/eu/karelhovorka/util/audio/TrackGroup.kt","../../jsMain/kotlin/eu/karelhovorka/util/html/HTMLElementUtil.kt","../../../../../../../../dummy.kt","../../jsMain/kotlin/eu/karelhovorka/util/html/ProgressLoader.kt"],"sourcesContent":[null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package eu.karelhovorka.util.html\r\n\r\nimport com.github.hovi.kotlintools.dom.debounceEvent\r\nimport com.github.hovi.kotlintools.dom.preloadImage\r\nimport com.github.hovi.kotlintools.dom.queryHtmlSelectorAll\r\nimport com.github.hovi.kotlintools.dom.scrollIntoView\r\nimport org.w3c.dom.Element\r\nimport org.w3c.dom.HTMLElement\r\nimport kotlin.browser.document\r\nimport kotlin.browser.window\r\nimport kotlin.js.Promise\r\n\r\n\r\nfun HTMLElement.hide() {\r\n    this.style.display = \"none\"\r\n}\r\n\r\nfun HTMLElement.show(display: String = \"block\") {\r\n    this.style.display = display\r\n}\r\n\r\n\r\nfun HTMLElement.setAttributeIfNull(qualifiedName: String, value: String) {\r\n    if (getAttribute(qualifiedName) == null) {\r\n        setAttribute(qualifiedName, value)\r\n    }\r\n}\r\n\r\nfun HTMLElement.clickToHide() {\r\n    onclick = {\r\n        this.hide()\r\n    }\r\n}\r\n\r\nfun Element.isFormElement(): Boolean {\r\n    return tagName.toUpperCase() in arrayOf(\"INPUT\", \"SELECT\", \"TEXTAREA\", \"BUTTON\")\r\n}\r\n\r\nfun jsContinueMove() {\r\n    js(\"window.game.continueMove()\")\r\n}\r\n\r\nfun HTMLElement.clickToContinue() {\r\n    onclick = {\r\n        jsContinueMove()\r\n    }\r\n}\r\n\r\nfun HTMLElement.newParent(elementName: String = \"div\"): HTMLElement {\r\n    val newDiv = document.createElement(elementName) as HTMLElement\r\n    while (this.hasChildNodes()) {\r\n        newDiv.appendChild(this.firstChild!!)\r\n    }\r\n    this.appendChild(newDiv)\r\n    return newDiv\r\n}\r\n\r\nfun ProgressLoader.preloadImages(images: Collection<String>, onProgress: (Int, Int) -> Unit = { _, _ -> }, onFinish: () -> Unit = {}) {\r\n    if (images.isEmpty()) {\r\n        return\r\n    }\r\n    val loader = this\r\n    loader.start()\r\n    var index: Int = 0\r\n    val max = images.size\r\n    Promise.all(\r\n            images.map { url ->\r\n                preloadImage(url = url).then(\r\n                        onFulfilled = {\r\n                            index += 1\r\n                            loader.updateProgress(index, max)\r\n                            onProgress(index, max)\r\n                            url\r\n                        },\r\n                        onRejected = {\r\n                            index += 1\r\n                            loader.updateProgress(index, max)\r\n                            onProgress(index, max)\r\n                            it\r\n                        }\r\n                )\r\n            }.toTypedArray()\r\n    ).then {\r\n        loader.finish()\r\n        onFinish()\r\n    }.catch {\r\n        loader.finish()\r\n        onFinish()\r\n    }\r\n}\r\n\r\nfun HTMLElement.scrollIntoViewIfNotScrolling(behavior: String = \"smooth\", block: String = \"start\", inline: String = \"nearest\") {\r\n    val scrollingWatcher = ScrollingWatcher.getOrInit()\r\n    if (scrollingWatcher.scrolling) {\r\n        return\r\n    }\r\n    scrollIntoView(behavior = behavior, block = block, inline = inline)\r\n}\r\n\r\nclass ScrollingWatcher(var element: HTMLElement = document.getElementById(\"game\") as HTMLElement, var milliseconds: Int = 500) {\r\n    private var scrolling_: Boolean = false\r\n\r\n    val scrolling: Boolean\r\n        get() = scrolling_\r\n\r\n    init {\r\n        watchScrolling()\r\n    }\r\n\r\n    private fun watchScrolling(): ScrollingWatcher {\r\n        element.addEventListener(\"scroll\", { scrolling_ = true })\r\n        element.addEventListener(\"scroll\",\r\n                debounceEvent({\r\n                    scrolling_ = false\r\n                }, milliseconds)\r\n        )\r\n        return this\r\n    }\r\n\r\n    companion object {\r\n        private const val KEY = \"scrollingWatcher\"\r\n\r\n        fun init(milliseconds: Int = 200): ScrollingWatcher {\r\n            val scrollingWatcher = ScrollingWatcher(milliseconds = milliseconds)\r\n            window.asDynamic()[KEY] = scrollingWatcher\r\n            return scrollingWatcher\r\n        }\r\n\r\n        fun getOrInit(milliseconds: Int = 200): ScrollingWatcher {\r\n            if (window.asDynamic()[KEY] == null) {\r\n                return init(milliseconds)\r\n            }\r\n            return window.asDynamic()[KEY] as ScrollingWatcher\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexternal fun textFit(element: HTMLElement, options: dynamic)\r\n\r\nfun kotlinDoFit() {\r\n    val selector = \"#game .inner-bubble, #game ul.lepiky .caption, .needs-textfit, .knihovnicka-cteni .text\"\r\n    document.queryHtmlSelectorAll<HTMLElement>(selector).forEach {\r\n        textFit(it, js(\"{multiLine: true, maxFontSize: 120}\"))\r\n    }\r\n}\r\n\r\nfun fitAfterResize() {\r\n    window.addEventListener(\"resize\", debounceEvent(::kotlinDoFit, 10, immediate = true));\r\n}",null,null],"names":[],"mappings":"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"}